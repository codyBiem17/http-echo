name: Pipeline to Deploy Go App to K8S cluster

on:
  push:
    branches:
      - codybiem-feature-branch

env:
  DOCKER_IMAGE_REPO: "helm-goapp-isw"
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
     
    steps:
      - name: Checkout code github repo
        uses: actions/checkout@v3

      - name: Set up docker to build image
        uses: docker/setup-buildx-action@v1

      - name: Docker login
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin docker.io

      - name: Build a docker image using a Makefile
        run: make docker

      - name: Set tag to use github sha commit
        id: image_tag
        run: |
          IMAGE_TAG="${GITHUB_SHA::7}"
          echo "::set-output name=docker_image_tag::$IMAGE_TAG"

      - name: Tag and Push Docker Image from local to Public Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          #file: .
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_REPO}}:${{ steps.image_tag.outputs.docker_image_tag }}

      # - name: Set up kubeconfig
      #   run: |
      #     mkdir $HOME/.kube
      #     echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
      #     cat $HOME/.kube/config

      # - name: Use Minikube context
      #   run: kubectl config use-context minikube
        
      - name: Install and start Minikube cluster
        run: |
              curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              sudo install minikube-linux-amd64 /usr/local/bin/minikube
              minikube start --driver=docker
              minikube status

      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v1
      #   with:
      #     kubeconfig: $HOME/.kube/config

      - name: Install Helm chart
        run: |
          # helm version command to check iif helm is installed otherwise install it
          curl -fsSL -o helm-v3.14.2-linux-amd64.tar.gz https://get.helm.sh/helm-v3.14.2-linux-amd64.tar.gz
          tar -xvf helm-v3.14.2-linux-amd64.tar.gz
          sudo mv linux-amd64 /usr/local/bin
          helm version  # Verify Helm installation

      - name: Deploy Helm chart to K8S to create a release
        # env:
        #   KUBE_CONFIG: $HOME/.kube/config
        run: |
          helm upgrade --install http-echo-goapp-release ./http-echo-helm --wait
          #sleep 60s

      # - name: Navigate to Helm chart directory and Check content of the deployment and services file
      #   run: |
      #     cd http-echo-helm
      #     cd templates
      #     cat deployment.yaml
      #     cat service.yaml

      - name: Confirm deployment in K8S cluster succeeds
        run: |
          kubectl get pods
          kubectl get deployments
          kubectl get services

      - name: Get loadbalance ip for accessing the application
        id: get-lb-ip
        run: |
          EXTERNAL_IP=$(kubectl get svc http-echo-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "::set-output name=lb-ip::$EXTERNAL_IP"


      - name: Get service details with exposed port
        run: |
          loadbalancer_ip="${{ steps.get-lb-ip.outputs.lb-ip }}"
          echo "Access http-echo application at http://$loadbalancer_ip:5678
